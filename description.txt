Dungeon Blaster is an exciting new computer game in which you must guide your character through a perilous labyrinth. The game is still in its alpha stage, so you've been hired to test some level designs.
You're given a map of the labyrinth, in the form of an array of equal-length strings.

Example map:

m =
["######",
 "#  * #",
 "# #  #",
 "#A## #",
 "# ^# #",
 "#### #",
 "#a   #",
 "######"]
LEGEND
Here's what each type of tile represents:

"*" : This is your character's starting position;
"^" : This is the exit (the goal is to get your character to this spot);
" " : Spaces represent open space that your character can move through freely;
"#" : Hashtags represent walls, which your character can't move through;
"A" : Uppercase letters represent doors, which are all initially locked, meaning your character can't go through a door unless you have collected the corresponding key;
"a" : Lowercase letters represent keys, which unlock the door of the same letter. Your character can move through these tiles.
HOW TO PLAY
Your character can move in four directions: up, down, left, and right - but no diagonals. The goal is to direct your character from her starting position ("*") to the exit ("^"). You may need to pick up some keys in order to get there!

One more important detail: This labyrinth is located on the surface of a torus, so it is possible for your character to wrap around the map vertically or horizontally, unless they're blocked by a wall or door.

As an alpha tester, your responsibility is to determine whether or not it's possible to reach the exit on the given map.

Example

For
m = 
["######",
 "#  * #",
 "# #  #",
 "#A## #",
 "# ^# #",
 "#### #",
 "#a   #",
 "######"]
the output should be
dungeonBlaster(m) = true.
By first collecting the a key, you can pass through the A door and reach the exit, so return True for this map.

For
m =
["#############",
 "       ^#*   ",
 "#############"]
the output should be
dungeonBlaster(m) = true.
Since the character can wrap around the map, she can reach the exit by traveling right, so return True again.

For
m =
["########",
 "#  #  ^#",
 "#*  #  #",
 "########"]
the output should be
dungeonBlaster(m) = false.
Since your character can't move diagonally, there's no way to reach the exit, so return False for this one.

[execution time limit] 4 seconds (py3)

[input] array.string m

This is the map of the level. Check the legend above to see what each type of character represents.

Guaranteed constraints:
1 = m.length = 40,
2 = m[i].length = 40.

[output] boolean

Return True if the level can be completed, and False if the level is impossible.